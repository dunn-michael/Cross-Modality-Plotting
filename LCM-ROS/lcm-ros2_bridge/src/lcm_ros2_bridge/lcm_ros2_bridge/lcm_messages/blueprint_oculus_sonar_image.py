"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class blueprint_oculus_sonar_image(object):
    __slots__ = ["timestamp", "height", "width", "encoding", "is_bigendian", "data"]

    __typenames__ = ["int64_t", "int32_t", "int32_t", "string", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, ["height", "width"]]

    def __init__(self):
        self.timestamp = 0
        self.height = 0
        self.width = 0
        self.encoding = ""
        self.is_bigendian = 0
        self.data = []

    def encode(self):
        buf = BytesIO()
        buf.write(blueprint_oculus_sonar_image._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qii", self.timestamp, self.height, self.width))
        __encoding_encoded = self.encoding.encode('utf-8')
        buf.write(struct.pack('>I', len(__encoding_encoded)+1))
        buf.write(__encoding_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">h", self.is_bigendian))
        for i0 in range(self.height):
            buf.write(struct.pack('>%dh' % self.width, *self.data[i0][:self.width]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != blueprint_oculus_sonar_image._get_packed_fingerprint():
            raise ValueError("Decode error")
        return blueprint_oculus_sonar_image._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = blueprint_oculus_sonar_image()
        self.timestamp, self.height, self.width = struct.unpack(">qii", buf.read(16))
        __encoding_len = struct.unpack('>I', buf.read(4))[0]
        self.encoding = buf.read(__encoding_len)[:-1].decode('utf-8', 'replace')
        self.is_bigendian = struct.unpack(">h", buf.read(2))[0]
        self.data = []
        for i0 in range(self.height):
            self.data.append(struct.unpack('>%dh' % self.width, buf.read(self.width * 2)))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if blueprint_oculus_sonar_image in parents: return 0
        tmphash = (0xd6943e69ee70dded) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if blueprint_oculus_sonar_image._packed_fingerprint is None:
            blueprint_oculus_sonar_image._packed_fingerprint = struct.pack(">Q", blueprint_oculus_sonar_image._get_hash_recursive([]))
        return blueprint_oculus_sonar_image._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", blueprint_oculus_sonar_image._get_packed_fingerprint())[0]

