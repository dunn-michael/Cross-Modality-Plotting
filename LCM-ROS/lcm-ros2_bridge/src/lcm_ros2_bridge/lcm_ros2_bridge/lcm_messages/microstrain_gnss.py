"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class microstrain_gnss(object):
    __slots__ = ["timestamp", "latitude", "longitude", "heightAboveElipsoid", "heightAboveMSL", "horizontalAccuracy", "verticalAccuracy", "ecefPosX", "ecefPosY", "ecefPosZ", "ecefPosAccuracy", "northVelocity", "eastVelocity", "downVelocity", "speed", "groundSpeed", "heading", "speedAccuracy", "headingAccuracy", "ecefVelX", "ecefVelY", "ecefVelZ", "ecefVelAccuracy", "geometricDOP", "positionDOP", "horizontalDOP", "verticalDOP", "timeDOP", "northingDOP", "eastingDOP", "utcTimestamp", "utcTimestampFlags", "gpsTimeTow", "gpsTimeWeekNum", "gpsClockBias", "gpsClockDrift", "gpsClockAccuracy", "gnssFixType", "gnssFixSvCount", "gnssFixFlags", "sensorState", "antennaState", "antennaPower", "dgnss_newestAge_gnssBase_0", "dgnss_baseStationStatus_gnssBase_0", "dgnss_numChannels_gnssBase_0"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "float", "float", "double", "double", "double", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int64_t", "int32_t", "double", "int32_t", "double", "double", "double", "int16_t", "int16_t", "int32_t", "int16_t", "int16_t", "int16_t", "float", "int16_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.latitude = 0.0
        self.longitude = 0.0
        self.heightAboveElipsoid = 0.0
        self.heightAboveMSL = 0.0
        self.horizontalAccuracy = 0.0
        self.verticalAccuracy = 0.0
        self.ecefPosX = 0.0
        self.ecefPosY = 0.0
        self.ecefPosZ = 0.0
        self.ecefPosAccuracy = 0.0
        self.northVelocity = 0.0
        self.eastVelocity = 0.0
        self.downVelocity = 0.0
        self.speed = 0.0
        self.groundSpeed = 0.0
        self.heading = 0.0
        self.speedAccuracy = 0.0
        self.headingAccuracy = 0.0
        self.ecefVelX = 0.0
        self.ecefVelY = 0.0
        self.ecefVelZ = 0.0
        self.ecefVelAccuracy = 0.0
        self.geometricDOP = 0.0
        self.positionDOP = 0.0
        self.horizontalDOP = 0.0
        self.verticalDOP = 0.0
        self.timeDOP = 0.0
        self.northingDOP = 0.0
        self.eastingDOP = 0.0
        self.utcTimestamp = 0
        self.utcTimestampFlags = 0
        self.gpsTimeTow = 0.0
        self.gpsTimeWeekNum = 0
        self.gpsClockBias = 0.0
        self.gpsClockDrift = 0.0
        self.gpsClockAccuracy = 0.0
        self.gnssFixType = 0
        self.gnssFixSvCount = 0
        self.gnssFixFlags = 0
        self.sensorState = 0
        self.antennaState = 0
        self.antennaPower = 0
        self.dgnss_newestAge_gnssBase_0 = 0.0
        self.dgnss_baseStationStatus_gnssBase_0 = 0
        self.dgnss_numChannels_gnssBase_0 = 0

    def encode(self):
        buf = BytesIO()
        buf.write(microstrain_gnss._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddddffdddffffffffffffffffffffqididddhhihhhfhi", self.timestamp, self.latitude, self.longitude, self.heightAboveElipsoid, self.heightAboveMSL, self.horizontalAccuracy, self.verticalAccuracy, self.ecefPosX, self.ecefPosY, self.ecefPosZ, self.ecefPosAccuracy, self.northVelocity, self.eastVelocity, self.downVelocity, self.speed, self.groundSpeed, self.heading, self.speedAccuracy, self.headingAccuracy, self.ecefVelX, self.ecefVelY, self.ecefVelZ, self.ecefVelAccuracy, self.geometricDOP, self.positionDOP, self.horizontalDOP, self.verticalDOP, self.timeDOP, self.northingDOP, self.eastingDOP, self.utcTimestamp, self.utcTimestampFlags, self.gpsTimeTow, self.gpsTimeWeekNum, self.gpsClockBias, self.gpsClockDrift, self.gpsClockAccuracy, self.gnssFixType, self.gnssFixSvCount, self.gnssFixFlags, self.sensorState, self.antennaState, self.antennaPower, self.dgnss_newestAge_gnssBase_0, self.dgnss_baseStationStatus_gnssBase_0, self.dgnss_numChannels_gnssBase_0))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != microstrain_gnss._get_packed_fingerprint():
            raise ValueError("Decode error")
        return microstrain_gnss._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = microstrain_gnss()
        self.timestamp, self.latitude, self.longitude, self.heightAboveElipsoid, self.heightAboveMSL, self.horizontalAccuracy, self.verticalAccuracy, self.ecefPosX, self.ecefPosY, self.ecefPosZ, self.ecefPosAccuracy, self.northVelocity, self.eastVelocity, self.downVelocity, self.speed, self.groundSpeed, self.heading, self.speedAccuracy, self.headingAccuracy, self.ecefVelX, self.ecefVelY, self.ecefVelZ, self.ecefVelAccuracy, self.geometricDOP, self.positionDOP, self.horizontalDOP, self.verticalDOP, self.timeDOP, self.northingDOP, self.eastingDOP, self.utcTimestamp, self.utcTimestampFlags, self.gpsTimeTow, self.gpsTimeWeekNum, self.gpsClockBias, self.gpsClockDrift, self.gpsClockAccuracy, self.gnssFixType, self.gnssFixSvCount, self.gnssFixFlags, self.sensorState, self.antennaState, self.antennaPower, self.dgnss_newestAge_gnssBase_0, self.dgnss_baseStationStatus_gnssBase_0, self.dgnss_numChannels_gnssBase_0 = struct.unpack(">qddddffdddffffffffffffffffffffqididddhhihhhfhi", buf.read(224))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if microstrain_gnss in parents: return 0
        tmphash = (0xd766a65869a86cb8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if microstrain_gnss._packed_fingerprint is None:
            microstrain_gnss._packed_fingerprint = struct.pack(">Q", microstrain_gnss._get_hash_recursive([]))
        return microstrain_gnss._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", microstrain_gnss._get_packed_fingerprint())[0]

