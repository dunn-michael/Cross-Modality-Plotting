"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class microstrain_imu(object):
    __slots__ = ["timestamp", "scaledAccelX", "scaledAccelY", "scaledAccelZ", "scaledGyroX", "scaledGyroY", "scaledGyroZ", "scaledMagX", "scaledMagY", "scaledMagZ", "deltaThetaX", "deltaThetaY", "deltaThetaZ", "deltaVelX", "deltaVelY", "deltaVelZ", "orientMatrix", "roll", "pitch", "yaw", "orientQuaternion", "stabilizedMagX", "stabilizedMagY", "stabilizedMagZ", "stabilizedAccelX", "stabilizedAccelY", "stabilizedAccelZ", "gpsCorrelTimestampTow", "gpsCorrelTimestampWeekNum", "gpsCorrelTimestampFlags", "scaledAmbientPressure"]

    __typenames__ = ["int64_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "double", "int32_t", "int32_t", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, [3, 3], None, None, None, [3], None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.scaledAccelX = 0.0
        self.scaledAccelY = 0.0
        self.scaledAccelZ = 0.0
        self.scaledGyroX = 0.0
        self.scaledGyroY = 0.0
        self.scaledGyroZ = 0.0
        self.scaledMagX = 0.0
        self.scaledMagY = 0.0
        self.scaledMagZ = 0.0
        self.deltaThetaX = 0.0
        self.deltaThetaY = 0.0
        self.deltaThetaZ = 0.0
        self.deltaVelX = 0.0
        self.deltaVelY = 0.0
        self.deltaVelZ = 0.0
        self.orientMatrix = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(3) ]
        self.roll = 0.0
        self.pitch = 0.0
        self.yaw = 0.0
        self.orientQuaternion = [ 0.0 for dim0 in range(3) ]
        self.stabilizedMagX = 0.0
        self.stabilizedMagY = 0.0
        self.stabilizedMagZ = 0.0
        self.stabilizedAccelX = 0.0
        self.stabilizedAccelY = 0.0
        self.stabilizedAccelZ = 0.0
        self.gpsCorrelTimestampTow = 0.0
        self.gpsCorrelTimestampWeekNum = 0
        self.gpsCorrelTimestampFlags = 0
        self.scaledAmbientPressure = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(microstrain_imu._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qfffffffffffffff", self.timestamp, self.scaledAccelX, self.scaledAccelY, self.scaledAccelZ, self.scaledGyroX, self.scaledGyroY, self.scaledGyroZ, self.scaledMagX, self.scaledMagY, self.scaledMagZ, self.deltaThetaX, self.deltaThetaY, self.deltaThetaZ, self.deltaVelX, self.deltaVelY, self.deltaVelZ))
        for i0 in range(3):
            buf.write(struct.pack('>3f', *self.orientMatrix[i0][:3]))
        buf.write(struct.pack(">fff", self.roll, self.pitch, self.yaw))
        buf.write(struct.pack('>3f', *self.orientQuaternion[:3]))
        buf.write(struct.pack(">ffffffdiif", self.stabilizedMagX, self.stabilizedMagY, self.stabilizedMagZ, self.stabilizedAccelX, self.stabilizedAccelY, self.stabilizedAccelZ, self.gpsCorrelTimestampTow, self.gpsCorrelTimestampWeekNum, self.gpsCorrelTimestampFlags, self.scaledAmbientPressure))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != microstrain_imu._get_packed_fingerprint():
            raise ValueError("Decode error")
        return microstrain_imu._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = microstrain_imu()
        self.timestamp, self.scaledAccelX, self.scaledAccelY, self.scaledAccelZ, self.scaledGyroX, self.scaledGyroY, self.scaledGyroZ, self.scaledMagX, self.scaledMagY, self.scaledMagZ, self.deltaThetaX, self.deltaThetaY, self.deltaThetaZ, self.deltaVelX, self.deltaVelY, self.deltaVelZ = struct.unpack(">qfffffffffffffff", buf.read(68))
        self.orientMatrix = []
        for i0 in range(3):
            self.orientMatrix.append(struct.unpack('>3f', buf.read(12)))
        self.roll, self.pitch, self.yaw = struct.unpack(">fff", buf.read(12))
        self.orientQuaternion = struct.unpack('>3f', buf.read(12))
        self.stabilizedMagX, self.stabilizedMagY, self.stabilizedMagZ, self.stabilizedAccelX, self.stabilizedAccelY, self.stabilizedAccelZ, self.gpsCorrelTimestampTow, self.gpsCorrelTimestampWeekNum, self.gpsCorrelTimestampFlags, self.scaledAmbientPressure = struct.unpack(">ffffffdiif", buf.read(44))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if microstrain_imu in parents: return 0
        tmphash = (0x9ec8a3535b79d318) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if microstrain_imu._packed_fingerprint is None:
            microstrain_imu._packed_fingerprint = struct.pack(">Q", microstrain_imu._get_hash_recursive([]))
        return microstrain_imu._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", microstrain_imu._get_packed_fingerprint())[0]

